name: CI - Build, Run & SonarQube for UAT

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:9.9-community
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl --fail http://localhost:9000/api/system/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true" # Simplifica arranque en contenedor chico

    steps:
      - name: Checkout código fuente
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Instalar Maven
        run: sudo apt-get update && sudo apt-get install -y maven

      - name: Esperar que SonarQube esté disponible
        run: |
          echo "Esperando que SonarQube se levante..."
          for i in {1..15}; do
            if curl -s http://localhost:9000/api/system/health | grep -q '"status":"UP"'; then
              echo "✅ SonarQube está listo"
              break
            else
              echo "⏳ Esperando SonarQube... intento $i"
              sleep 5
            fi
          done

      - name: Compilar y empaquetar la app (sin tests)
        run: mvn clean package spring-boot:repackage -DskipTests

      - name: Analizar con SonarQube
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=calculadora-api \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Instalar Chrome y ChromeDriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-chromedriver chromium-browser
          sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/local/bin/chromedriver
          chromedriver --version

      - name: Ejecutar la aplicación en segundo plano
        run: |
          java -Dspring.profiles.active=prod -Dheadless -jar target/*.jar &
          echo $! > pid.txt

      - name: Esperar que la app esté disponible
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8080/; then
              echo "✅ App disponible"
              exit 0
            else
              echo "⏳ Esperando la app... intento $i"
              sleep 5
            fi
          done
          echo "❌ La app no se levantó a tiempo"
          exit 1

      - name: Probar endpoint de ejemplo
        run: |
          echo "Probando endpoint /api/calculadora/sumar?a=5&b=7"
          curl -v "http://localhost:8080/api/calculadora/sumar?a=5&b=7"

      - name: Ejecutar pruebas de Selenium
        run: |
          mvn test -Dtest=com.ejemplo.calculadora.CalculadoraUITest

      - name: Mostrar logs de la app
        run: |
          echo "Logs de la app:"
          cat nohup.out || echo "No se encontró el archivo de logs"

      - name: Detener la aplicación
        run: |
          kill $(cat pid.txt) || echo "No se pudo detener la app"
