name: CI - Build, Run for UAT & SonarQube Analysis

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

jobs:
  build-and-analyze:
    name: Build and Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código fuente
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for SonarQube

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze with SonarQube (sin tests en Sonar)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=alonsokratos31_Prueba_DevOps_Diplomado -Dsonar.skipPackage=true

      - name: Compilar y empaquetar la app (sin tests)
        run: mvn clean package spring-boot:repackage -DskipTests

      - name: Instalar Chrome y ChromeDriver desde repositorios compatibles
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-chromedriver chromium-browser
          sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/local/bin/chromedriver
          chromedriver --version

      - name: Ejecutar la aplicación en segundo plano
        run: |
          java -Dspring.profiles.active=prod -Dheadless -jar target/*.jar &
          echo $! > pid.txt
          sleep 10 # Pausa después de iniciar la app

      - name: Esperar que la app esté disponible (verificando el endpoint específico)
        run: |
          for i in {1..25}; do # Aumentar aún más el número de intentos
            if curl -s http://localhost:8080/api/calculadora/sumar?a=1&b=1; then
              echo "✅ App disponible en /api/calculadora/"
              exit 0
            else
              echo "⏳ Esperando la app... intento $i"
              sleep 5
            fi
          done
          echo "❌ La app no se levantó a tiempo en /api/calculadora/"
          exit 1

      - name: Probar accesibilidad local antes de Selenium
        run: |
          echo "Intentando acceder a http://localhost:8080/api/calculadora/ desde el runner..."
          curl -v http://localhost:8080/api/calculadora/

      - name: Pausa adicional antes de Selenium
        run: sleep 15 # Pausa de 15 segundos adicionales

      - name: Ejecutar pruebas de Selenium
        run: |
          mvn test -Dtest=com.ejemplo.calculadora.CalculadoraUITest

      - name: Mostrar logs de la app
        run: |
          echo "Logs de la app:"
          cat nohup.out || echo "No se encontró el archivo de logs"

      - name: Detener la aplicación
        run: |
          kill $(cat pid.txt) || echo "No se pudo detener la app"
