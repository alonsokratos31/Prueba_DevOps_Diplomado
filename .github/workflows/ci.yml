name: CI - Build & Run for UAT

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código fuente
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necesario para SonarQube

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Análisis SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=alonsokratos31_Prueba_DevOps_Diplomado

      - name: Compilar y empaquetar la app (sin tests)
        run: mvn clean package spring-boot:repackage -DskipTests

      - name: Instalar Google Chrome
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          google-chrome --version

      - name: Ejecutar la aplicación en segundo plano
        run: |
          nohup java -Dspring.profiles.active=prod -Dheadless -jar target/*.jar > app.log 2>&1 &
          echo $! > pid.txt

      - name: Esperar que la app esté disponible
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:8080/; then
              echo "✅ App disponible"
              exit 0
            else
              echo "⏳ Esperando la app... intento $i"
              sleep 5
            fi
          done
          echo "❌ La app no se levantó a tiempo"
          exit 1

      - name: Probar endpoint de ejemplo
        run: |
          echo "Probando endpoint /api/calculadora/sumar?a=5&b=7"
          curl -v "http://localhost:8080/api/calculadora/sumar?a=5&b=7"

      - name: Ejecutar pruebas de Selenium
        run: |
          mvn test -Dtest=com.ejemplo.calculadora.CalculadoraUITest

      - name: Mostrar logs de la app
        run: |
          echo "Logs de la app:"
          cat app.log || echo "No se encontró el archivo de logs"

      - name: Detener la aplicación
        run: |
          kill $(cat pid.txt) || echo "No se pudo detener la app"
